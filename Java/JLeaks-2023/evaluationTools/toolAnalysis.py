# -*- coding: utf-8 -*-
import os
import openpyxl
import xml.etree.ElementTree as ET_spotbugs
import xml.etree.ElementTree as ET_pmd
import json

# file directory
spotbugs_output_dir = 'toolResult/output-spotbugs'
infer_output_dir = 'toolResult/output-infer'
pmd_output_dir = 'toolResult/output-pmd'

# fileter the xml file generated by SpotBugs
def filter_xml_spotbugs(file_name_hash):
    # Specify the XML file path
    xml_file_path = f"{spotbugs_output_dir}/{file_name_hash}.xml"

    if not os.path.exists(f'{spotbugs_output_dir}/filter'):
        os.makedirs(f'{spotbugs_output_dir}/filter')

    # Parsing XML files
    if os.path.exists(xml_file_path):
        if os.path.getsize(xml_file_path) > 0:
            tree = ET_spotbugs.parse(xml_file_path)
            root = tree.getroot()

            # Search Project and BugInstance elements
            project = root.find('Project')
            bug_instances = root.findall('BugInstance')            
            
            # Create a new ElementTree object and add a new root element
            new_tree = ET_spotbugs.ElementTree()
            new_root = ET_spotbugs.Element('BugCollection')
            new_tree._setroot(new_root)
            # Add the Project, BugInstance elements to the new root element
            new_root.append(project)
            for bug_instance in bug_instances:
                new_root.append(bug_instance)
            # Write the new ElementTree object to a new xml file
            new_tree.write(f'{spotbugs_output_dir}/filter/{file_name_hash}_filtered.xml')

# Determine whether Spotbugs has detected resource leak
def process_xml_file_spotbugs(xml_file, class_name, method_name):
    result = "Failed"

    if os.path.exists(xml_file):
        tree = ET_spotbugs.parse(xml_file)
        root = tree.getroot()

        if root.findall("./BugInstance"):
            for bug_instance in root.findall("./BugInstance"):
                if result == "Success":
                    break
                for class_elem in bug_instance.findall("./Class"):
                    sourceline_elem = class_elem.find("./SourceLine")
                    sourcefile = sourceline_elem.get('sourcefile')
                    classname = sourcefile.split(".")[0]

                    if classname == class_name:
                        for method_elem in bug_instance.findall("./Method"):
                            methodname = method_elem.get('name')
                            if methodname == method_name:
                                result = "Success"
                                break
                            else:
                                result = "Class matched but method not"
                        break  
        else:
            result = "Don't detect any resource leak defect!"
    else:
        result = "Spotbugs running failed"
        
    return result

# Determine whether Infer has detected resource leak
def process_json_file_infer(file_path, class_name, method_name):
    result = "Don't detect any resource leak defect in defect file!"
    if not os.path.exists(file_path):
        result="Infer running failed!"
    else:
        with open(file_path,'r') as f:
            data = json.load(f)

            if not data:
                result = "Don't detect any resource leak defect!"
            else:
                for bug_info in data:
                    key = bug_info['key']
                    file_name = key.split('|')[0]
                    methodName = key.split('|')[1]
                    bug_type = key.split('|')[2]
                    
                    if bug_type != "RESOURCE_LEAK":
                        continue
                    className = file_name.split('.')[0]

                    if className == class_name:
                        if methodName == method_name:
                            result = "Success"
                            break
                        else:
                            result = "Class matched but method not"
    return result

# Determine whether PMD has detected resource leak
def process_xmlfile_pmd(file_path,method_name):
    result = "Failed"

    if os.path.exists(file_path):
        if os.path.getsize(file_path) > 0:
            pmd_tree = ET_pmd.parse(file_path)
            pmd_root = pmd_tree.getroot()
            
            # Define the XML namespace
            namespace = {'ns': 'http://pmd.sourceforge.net/report/2.0.0'}

            # Get all the file elements
            file_elements = pmd_root.findall('.//ns:file', namespaces=namespace)

            if file_elements:
                for file_element in file_elements:
                    if result == "Success":
                        break

                    violation_elements = file_element.findall('.//ns:violation', namespaces=namespace)
                    
                    for violation_elem in violation_elements:
                        methodName = violation_elem.get('method')
                        if methodName == method_name:
                            result = "Success"
                            break
                        else:
                            result = "Class matched but method not"
            else:
                result = "Don't detect any resource leak defect!"
        else:
            result = "xml file is null"
    else:
        result = "Pmd running failed"
    return result

# split the change line
def split_change_line(change_line):
    if change_line is None:
        file_path=""
        file_name=""
    else:
        path = change_line.split(":")[0]
        file_path = path.split('.')[0]+".class"
        file_name = file_path.split('/')[-1]
    return file_path,file_name

# Specify the Excel file path and the workbook
workbook = openpyxl.load_workbook('file/data-tool.xlsx')
sheet = workbook['Sheet1']

sheet_name = "Result"
if sheet_name not in workbook.sheetnames:
    worksheet1 = workbook.create_sheet(sheet_name)
    title = ['ID','repository_name','defect_version','fix_version','defect_file_hash','fix__file_hash','Spotbugs Result','Infer Result','PMD Result']
    worksheet1.append(title)
else:
    worksheet1 = workbook[sheet_name]
    worksheet1.delete_rows(2, worksheet1.max_row)


pmd_num = 0
pmd_success_num = 0
spotbugs_num = 0
spotbugs_success_num = 0
infer_num = 0
infer_success_num = 0

# Get the item content in the Excel file, and run the tools to obtain the  result
for row in sheet.iter_rows(min_row=2,values_only=True):
    ID = str(row[0])
    repository_name = row[1]
    defect_version = row[2]
    fix_version = row[3]
    change_line = row[4]
    defect_hash = row[5]
    fix_hash = row[6]
    method_name = row[7]
    flag=row[8]
    flag2=row[9]

    print(f"{ID}->{repository_name}->{defect_version} is processing")

    file_path,file_name = split_change_line(change_line)
    project_name = repository_name.split('/')[-1]

    project_path = project_name + "-" + defect_version
    # file_name_hash = project_name + "-" + defect_version + "-" + defect_hash
    file_name_hash = f"bug-{ID}-{defect_hash}"
    
    class_name = file_name.split(".")[0]
    
    result_spotbugs = ""
    result_infer = ""
    result_pmd = ""

    if flag2 in [1,2,3]:
        filter_xml_spotbugs(file_name_hash)
        xml_file_path = f'{spotbugs_output_dir}/filter/{file_name_hash}_filtered.xml'
        result_spotbugs = process_xml_file_spotbugs(xml_file_path, class_name, method_name)
        #print("Spotbugs result:",result_spotbugs)
        spotbugs_num += 1
        if result_spotbugs == "Success":
            spotbugs_success_num += 1

    if flag in [2,3,4]:
        infer_file_path = f"{infer_output_dir}/{project_path}/report.json"
        result_infer = process_json_file_infer(infer_file_path,class_name,method_name)
        #print("Infer result:",result_infer)
        if result_infer != "Infer running failed!":
            infer_num += 1
        if result_infer == "Success":
            infer_success_num += 1

    pmd_file_path = f"{pmd_output_dir}/{file_name_hash}.xml"
    result_pmd = process_xmlfile_pmd(pmd_file_path,method_name)
    #print("PMD result:",result_pmd)
    pmd_num += 1
    if result_pmd == "Success":
        pmd_success_num += 1

    item_info = [ID,repository_name,defect_version,fix_version,defect_hash,fix_hash,result_spotbugs,result_infer,result_pmd]
    worksheet1.append(item_info)
    workbook.save('file/data-tool.xlsx')

accuracy_spotbugs = (spotbugs_success_num / spotbugs_num)*100
accuracy_pmd = (pmd_success_num / pmd_num)*100
accuracy_infer = (infer_success_num / infer_num)*100


print("\n*** Accuracy of each tool ***\n")
print(f"The accuracy of SpotBugs is {accuracy_spotbugs:.2f}%")
print(f"The accuracy of PMD is {accuracy_pmd:.2f}%")
print(f"The accuracy of Infer is {accuracy_infer:.2f}%")